// Gradle script to build and publish the MinieLibrary subproject of Minie

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   script of the root project.

plugins {
    id 'java-library'  // to build JVM libraries
    id 'maven-publish' // to publish artifacts to Maven repositories
    id 'signing'       // to sign artifacts for publication

    alias(libs.plugins.download) // to retrieve files from URLs
}

ext {
    if (rootProject.hasProperty('btdebug')) {
        // -Pbtdebug specified on the command line

        if (rootProject.hasProperty('dp')) {
            // both -Pbtdebug and -Pdp specified

            bftAndroid = '' // no DpDebug for Android yet
            configureDesktopBfts('DpDebug')
            metadata = 'debugdp' + jmeTarget

        } else { // -Pbtdebug specified, but not -Pdp
            bftAndroid = 'SpDebug'
            configureDesktopBfts('SpDebug')
            metadata = 'debug' + jmeTarget
        }

    } else if (rootProject.hasProperty('dp')) {
        // -Pdp specified, but not -Pbtdebug

        bftAndroid = '' // no DpRelease for Android yet
        configureDesktopBfts('DpRelease')
        metadata = 'dp' + jmeTarget

    } else if (rootProject.hasProperty('bare')) {
        // -Pbare specified, but neither -Pbtdebug nor -Pdp

        bftAndroid = ''
        configureDesktopBfts('')
        metadata = 'bare' + jmeTarget

    } else if (rootProject.hasProperty('big4')) {
        // -Pbig4 specified, but neither -Pbtdebug nor -Pdp nor -Pbare

        bftAndroid = ''
        configureDesktopBfts('')
        bftLinux64 = 'SpRelease'
        bftMacOSX64 = 'SpRelease'
        bftMacOSX_ARM64 = 'SpRelease'
        bftWindows64 = 'SpRelease'
        metadata = 'big4' + jmeTarget

    } else if (rootProject.hasProperty('mt')) {
        // -Pmt specified, but neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig4

        bftAndroid = ''
        configureDesktopBfts('')
        bftLinux64 = 'SpMtRelease'
        bftWindows64 = 'SpMtRelease'
        metadata = 'mt' + jmeTarget

    } else if (rootProject.hasProperty('droid')) {
        // -Pdroid specified, but neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig4 nor -Pmt

        bftAndroid = 'SpRelease'
        configureDesktopBfts('')
        metadata = 'droid' + jmeTarget

    } else {
        // neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig4 nor -Pmt nor -Pdroid specified
        bftAndroid = 'SpRelease'
        configureDesktopBfts('SpRelease')

        metadata = jmeTarget
    }

    group = 'com.github.stephengold'
    artifact = 'Minie'

    if (metadata.isEmpty()) {
        version = minieVersion
    } else if (metadata.startsWith('+')) {
        version = minieVersion + metadata
    } else {
        version = "${minieVersion}+${metadata}"
    }
    baseName = "${artifact}-${version}${minieSnapshot}" // for artifacts

    websiteUrl = 'https://github.com/stephengold/Minie'

    resourcesDir = 'src/main/resources/'
    libDir = resourcesDir + 'lib/'       // for Android native libraries
    lbjVersion = libs.versions.lbj.get()
    androidArchive = "Android-${lbjVersion}-${bftAndroid}"
}

dependencies {
    api(libs.heart)
    api(libs.sim.math)
    api(libs.jme3.core)
    api(libs.jme3.terrain)

    if (project.ext.bftLinux64 != '') {
        runtimeOnly(variantOf(libs.libbulletjme.linux64){ classifier(project.ext.bftLinux64) })
    }
    if (project.ext.bftLinux_ARM32 != '') {
        runtimeOnly(variantOf(libs.libbulletjme.linuxarm32hf){ classifier(project.ext.bftLinux_ARM32) })
    }
    if (project.ext.bftLinux_ARM64 != '') {
        runtimeOnly(variantOf(libs.libbulletjme.linuxarm64){ classifier(project.ext.bftLinux_ARM64) })
    }
    if (project.ext.bftMacOSX64 != '') {
        runtimeOnly(variantOf(libs.libbulletjme.macosx64){ classifier(project.ext.bftMacOSX64) })
    }
    if (project.ext.bftMacOSX_ARM64 != '') {
        runtimeOnly(variantOf(libs.libbulletjme.macosxarm64){ classifier(project.ext.bftMacOSX_ARM64) })
    }
    if (project.ext.bftWindows64 != '') {
        runtimeOnly(variantOf(libs.libbulletjme.windows64){ classifier(project.ext.bftWindows64) })
    }

    testImplementation(libs.junit4)
    testImplementation(libs.jme3.desktop)
    testImplementation(libs.jme3.plugins)
    testRuntimeOnly(libs.jme3.testdata.old)
}

test {
    failFast = true // stop after first failure
    forkEvery = 1  // don't run tests in parallel
    testLogging {
        events 'started', 'skipped', 'failed'
    }
}

// Register publishing tasks:

tasks.register('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description = 'Installs the Maven artifacts to the local repository.'
}
tasks.register('release') {
    dependsOn 'publishMavenPublicationToCentralRepository'
    description = 'Stages the Maven artifacts to the Central Publisher Portal.'
}

jar {
    archiveBaseName = project.ext.baseName
    doLast {
        println "built using Java ${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
    manifest {
        attributes 'Created-By': "${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
}

if (bftAndroid != '') {
    processResources.dependsOn('unpackAndroidNatives')
}
tasks.register('unpackAndroidNatives', Copy) {
    dependsOn 'downloadAndroidNatives'
    from (zipTree("build/${androidArchive}.jar")) {
        include 'jni/**'
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
        includeEmptyDirs = false
    }
    into layout.projectDirectory.dir(project.ext.libDir)
}
tasks.register('downloadAndroidNatives', Download) {
    src "https://repo1.maven.org/maven2/com/github/stephengold/Libbulletjme-Android/${lbjVersion}/Libbulletjme-${androidArchive}.aar"
    dest file("build/${androidArchive}.jar")
}

tasks.register('javadocJar', Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description = 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}
tasks.register('sourcesJar', Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description = 'Creates a JAR of Java sourcecode.'
    from sourceSets.main.allJava // default is ".allSource", which includes resources
}

assemble.dependsOn('module', 'moduleAsc', 'pom', 'pomAsc')
tasks.register('module', Copy) {
    dependsOn 'generateMetadataFileForMavenPublication'
    description = 'Copies the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json"
    into "${buildDir}/libs"
    rename 'module.json', project.ext.baseName + '.module'
}
tasks.register('moduleAsc', Copy) {
    dependsOn 'signMavenPublication'
    description = 'Copies the signature of the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json.asc"
    into "${buildDir}/libs"
    rename 'module.json.asc', project.ext.baseName + '.module.asc'
}
tasks.register('pom', Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description = 'Copies the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
tasks.register('pomAsc', Copy) {
    dependsOn 'signMavenPublication'
    description = 'Copies the signature of the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into "${buildDir}/libs"
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact javadocJar
            artifact sourcesJar
            artifactId = artifact
            from components.java
            groupId = project.ext.group
            pom {
                description = 'a physics library for jMonkeyEngine'
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        id = 'stephengold'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/Minie.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/Minie.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = 'https://stephengold.github.io/Minie'
            }
            version = project.ext.version + rootProject.ext.minieSnapshot
        }
    }
    // Staging to the Central Publisher Portal relies on the existence of 2 properties
    // (centralUsername and centralPassword)
    // which should be set in the ~/.gradle/gradle.properties file
    // or by -P options on the command line.
    repositories {
        maven {
            credentials {
                username = project.hasProperty('centralUsername') ? centralUsername : 'Unknown user'
                password = project.hasProperty('centralPassword') ? centralPassword : 'Unknown password'
            }
            name = 'Central'
            url = 'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/'
        }
    }
}
generateMetadataFileForMavenPublication.dependsOn('pom')
publishMavenPublicationToMavenLocal.dependsOn('assemble')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + baseName
}
publishMavenPublicationToCentralRepository.dependsOn('assemble')

// Register tasks to sign the Maven artifacts for publication:

// Signing relies on the existence of 3 properties
// (signing.keyId, signing.password, and signing.secretKeyRingFile)
// which should be set in the ~/.gradle/gradle.properties file
// or by -P options on the command line.

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign).configureEach {
    onlyIf { rootProject.hasProperty('signing.keyId') }
}
signMavenPublication.dependsOn('module')

// Register javadoc-to-(web)site tasks, triggered by push-master.yml:

tasks.register('copyJavadocToSite') {
    dependsOn 'copyMasterJavadocToSite', \
     'copy90JavadocToSite', \
     'copy82JavadocToSite', \
     'copy81JavadocToSite', \
     'copy80JavadocToSite', \
     'copy78JavadocToSite', \
     'copy77JavadocToSite', \
     'copy76JavadocToSite', \
     'copy75JavadocToSite', \
     'copy74JavadocToSite', \
     'copy72JavadocToSite', \
     'copy71JavadocToSite', \
     'copy70JavadocToSite', \
     'copy62JavadocToSite', \
     'copy61JavadocToSite', \
     'copy60JavadocToSite', \
     'copy51JavadocToSite', \
     'copy50JavadocToSite', \
     'copy49JavadocToSite', \
     'copy48JavadocToSite', \
     'copy47JavadocToSite', \
     'copy46JavadocToSite', \
     'copy45JavadocToSite', \
     'copy44JavadocToSite', \
     'copy43JavadocToSite', \
     'copy42JavadocToSite', \
     'copy41JavadocToSite', \
     'copy40JavadocToSite', \
     'copy31JavadocToSite', \
     'copy30JavadocToSite', \
     'copy20JavadocToSite'
}
tasks.register('copyMasterJavadocToSite', Copy) {
    dependsOn 'javadoc'
    from "${buildDir}/docs/javadoc"
    into '../build/site/javadoc/master'
}
defineJavadocTasksForRelease('9', '0', '1')
defineJavadocTasksForRelease('8', '2', '0')
defineJavadocTasksForRelease('8', '1', '0')
defineJavadocTasksForRelease('8', '0', '0')
defineJavadocTasksForRelease('7', '8', '1')
defineJavadocTasksForRelease('7', '7', '0')
defineJavadocTasksForRelease('7', '6', '0')
defineJavadocTasksForRelease('7', '5', '0')
defineJavadocTasksForRelease('7', '4', '0')
defineJavadocTasksForRelease('7', '2', '0')
defineJavadocTasksForRelease('7', '1', '0')
defineJavadocTasksForRelease('7', '0', '2')
defineJavadocTasksForRelease('6', '2', '0')
defineJavadocTasksForRelease('6', '1', '0')
defineJavadocTasksForRelease('6', '0', '1')
defineJavadocTasksForRelease('5', '1', '0')
defineJavadocTasksForRelease('5', '0', '1')
defineJavadocTasksForRelease('4', '9', '0')
defineJavadocTasksForRelease('4', '8', '1')
defineJavadocTasksForRelease('4', '7', '1')
defineJavadocTasksForRelease('4', '6', '1')
defineJavadocTasksForRelease('4', '5', '0')
defineJavadocTasksForRelease('4', '4', '0')
defineJavadocTasksForRelease('4', '3', '0')
defineJavadocTasksForRelease('4', '2', '0')
defineJavadocTasksForRelease('4', '1', '1')
defineJavadocTasksForRelease('4', '0', '2')
defineJavadocTasksForRelease('3', '1', '0')
defineJavadocTasksForRelease('3', '0', '0')
defineJavadocTasksForRelease('2', '0', '1')

// helper methods to configure native libraries:

void configureDesktopBfts(String value) {
    project.ext.bftLinux64 = value
    project.ext.bftLinux_ARM32 = value
    project.ext.bftWindows64 = value
    project.ext.bftLinux_ARM64 = value
    project.ext.bftMacOSX64 = value
    project.ext.bftMacOSX_ARM64 = value
}

// helper method to register tasks that copy javadoc to the (web)site

void defineJavadocTasksForRelease(String major, String minor, String patch) {
    String downloadTaskName = "download${major}${minor}Javadoc"
    String downloadUrl = 'https://github.com/stephengold/Minie/releases/download'
    String jarPath = "${buildDir}/docs/v${major}-${minor}.jar"
    String mmp = "${major}.${minor}.${patch}"

    tasks.register(downloadTaskName, Download) {
        src "${downloadUrl}/${mmp}/Minie-${mmp}-javadoc.jar"
        dest file(jarPath)
    }

    tasks.register("copy${major}${minor}JavadocToSite", Copy) {
        dependsOn downloadTaskName
        from zipTree(jarPath)
        into "../build/site/javadoc/v${major}-${minor}"
    }
}
