// Gradle script to build/publish the MinieLibrary subproject of Minie

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   script of the root project.

plugins {
    id 'java-library'  // to build JVM libraries
    id 'maven-publish' // to publish artifacts to Maven repositories
    id 'signing'       // to sign artifacts for publication
    alias(libs.plugins.download) // to retrieve files from URLs
}

ext {
    // The URL from which native libraries should be copied:
    libbulletjmeUrl = 'https://github.com/stephengold/Libbulletjme/releases/download/21.2.1/'

    jarType = ''
    if (rootProject.hasProperty('btdebug')) {
        // -Pbtdebug specified on the command line

        if (rootProject.hasProperty('dp')) {
            // both -Pbtdebug and -Pdp specified

            configureAndroidBtfs('') // no DebugDp for Android yet
            configureDesktopBtfs('DebugDp')
            metadata = 'debugdp' + jmeTarget

        } else if (rootProject.hasProperty('pdb64')) {
            // both -Pbtdebug and -Ppdb64 specified, but not -Pdp

            configureAndroidBtfs('')
            configureDesktopBtfs('')
            btfWindows64 = 'DebugSp'
            metadata = 'debug' + jmeTarget

        } else { // -Pbtdebug specified, but not -Pdp nor -Ppdb64
            configureAndroidBtfs('DebugSp')
            configureDesktopBtfs('DebugSp')
            metadata = 'debug' + jmeTarget
        }

    } else if (rootProject.hasProperty('dp')) {
        // -Pdp specified, but not -Pbtdebug

        configureAndroidBtfs('') // no ReleaseDp for Android yet
        configureDesktopBtfs('ReleaseDp')
        metadata = 'dp' + jmeTarget

    } else if (rootProject.hasProperty('bare')) {
        // -Pbare specified, but neither -Pbtdebug nor -Pdp

        configureAndroidBtfs('')
        configureDesktopBtfs('')
        metadata = 'bare' + jmeTarget

    } else if (rootProject.hasProperty('big4')) {
        // -Pbig4 specified, but neither -Pbtdebug nor -Pdp nor -Pbare

        configureAndroidBtfs('')
        configureDesktopBtfs('')
        btfLinux64 = 'ReleaseSp'
        btfMacOSX64 = 'ReleaseSp'
        btfMacOSX_ARM64 = 'ReleaseSp'
        btfWindows64 = 'ReleaseSp'
        metadata = 'big4' + jmeTarget

    } else if (rootProject.hasProperty('mt')) {
        // -Pmt specified, but neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig4

        configureAndroidBtfs('')
        configureDesktopBtfs('')
        btfLinux64 = 'ReleaseSpMt'
        btfWindows64 = 'ReleaseSpMt'
        metadata = 'mt' + jmeTarget

    } else if (rootProject.hasProperty('droid')) {
        // -Pdroid specified, but neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig4 nor -Pmt

        configureAndroidBtfs('ReleaseSp')
        configureDesktopBtfs('')
        metadata = 'droid' + jmeTarget

    } else { // neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig4 nor -Pmt nor -Pdroid specified

        // Specify the BTF (buildType + flavor) of native library for each platform:
        // (Specify '' for no native library.)

        btfAndroid_ARM7 = 'ReleaseSp'
        btfAndroid_ARM8 = 'ReleaseSp'
        btfAndroid_X86 = 'ReleaseSp'
        btfAndroid_X86_64 = 'ReleaseSp'
        btfLinux32 = 'ReleaseSp'
        btfLinux64 = 'ReleaseSp'
        btfLinux_ARM32 = 'hfReleaseSp'
        btfLinux_ARM64 = 'ReleaseSp'
        btfMacOSX32 = 'ReleaseSp'
        btfMacOSX64 = 'ReleaseSp'
        btfMacOSX_ARM64 = 'ReleaseSp'
        btfWindows32 = 'ReleaseSp'
        btfWindows64 = 'ReleaseSp'

        metadata = jmeTarget
    }

    group = 'com.github.stephengold'
    artifact = 'Minie'

    if (metadata.isEmpty()) {
        version = minieVersion
    } else if (metadata.startsWith('+')) {
        version = minieVersion + metadata
    } else {
        version = "${minieVersion}+${metadata}"
    }
    baseName = "${artifact}-${version}${minieSnapshot}" // for artifacts

    websiteUrl = 'https://github.com/stephengold/Minie'

    resourcesDir = 'src/main/resources/'
    libDir = resourcesDir + 'lib/'       // for Android native libraries
    nativeDir = resourcesDir + 'native/' // for desktop native libraries
}

dependencies {
    api(libs.heart)
    api(libs.sim.math)
    api(libs.jme3.core)
    api(libs.jme3.terrain)

    testImplementation(libs.junit4)
    testImplementation(libs.jme3.desktop)
    testImplementation(libs.jme3.plugins)
    testRuntimeOnly(libs.jme3.testdata.old)
}

test {
    failFast = true // stop after first failure
    forkEvery = 1  // don't run tests in parallel
    testLogging {
        events 'started', 'skipped', 'failed'
    }
}

processResources.dependsOn((btfAndroid_ARM7 == '' ? 'clean' : 'download') + 'Android_ARM7')
processResources.dependsOn((btfAndroid_ARM8 == '' ? 'clean' : 'download') + 'Android_ARM8')
processResources.dependsOn((btfAndroid_X86 == '' ? 'clean' : 'download') + 'Android_X86')
processResources.dependsOn((btfAndroid_X86_64 == '' ? 'clean' : 'download') + 'Android_X86_64')
processResources.dependsOn((btfLinux32 == '' ? 'clean' : 'download') + 'Linux32')
processResources.dependsOn((btfLinux64 == '' ? 'clean' : 'download') + 'Linux64')
processResources.dependsOn((btfLinux_ARM32 == '' ? 'clean' : 'download') + 'Linux_ARM32')
processResources.dependsOn((btfLinux_ARM64 == '' ? 'clean' : 'download') + 'Linux_ARM64')
processResources.dependsOn((btfMacOSX32 == '' ? 'clean' : 'download') + 'MacOSX32')
processResources.dependsOn((btfMacOSX64 == '' ? 'clean' : 'download') + 'MacOSX64')
processResources.dependsOn((btfMacOSX_ARM64 == '' ? 'clean' : 'download') + 'MacOSX_ARM64')
processResources.dependsOn((btfWindows32 == '' ? 'clean' : 'download') + 'Windows32')
processResources.dependsOn((btfWindows64 == '' ? 'clean' : 'download') + 'Windows64')

// Register tasks to download native libraries (from GitHub, typically)

tasks.register('downloadAndroid_ARM7', Download) {
    src libbulletjmeUrl + "Android_ARM7${btfAndroid_ARM7}_libbulletjme.so"
    dest file(libDir + 'armeabi-v7a/libbulletjme.so')
    overwrite false
}
tasks.register('downloadAndroid_ARM8', Download) {
    src libbulletjmeUrl + "Android_ARM8${btfAndroid_ARM8}_libbulletjme.so"
    dest file(libDir + 'arm64-v8a/libbulletjme.so')
    overwrite false
}
tasks.register('downloadAndroid_X86', Download) {
    src libbulletjmeUrl + "Android_X86${btfAndroid_X86}_libbulletjme.so"
    dest file(libDir + 'x86/libbulletjme.so')
    overwrite false
}
tasks.register('downloadAndroid_X86_64', Download) {
    src libbulletjmeUrl + "Android_X86_64${btfAndroid_X86_64}_libbulletjme.so"
    dest file(libDir + 'x86_64/libbulletjme.so')
    overwrite false
}
tasks.register('downloadLinux32', Download) {
    src libbulletjmeUrl + "Linux32${btfLinux32}_libbulletjme.so"
    dest file(nativeDir + 'linux/x86/libbulletjme.so')
    overwrite false
}
tasks.register('downloadLinux64', Download) {
    src libbulletjmeUrl + "Linux64${btfLinux64}_libbulletjme.so"
    dest file(nativeDir + 'linux/x86_64/libbulletjme.so')
    overwrite false
}
tasks.register('downloadLinux_ARM32', Download) {
    src libbulletjmeUrl + "Linux_ARM32${btfLinux_ARM32}_libbulletjme.so"
    dest file(nativeDir + 'linux/arm32/libbulletjme.so')
    overwrite false
}
tasks.register('downloadLinux_ARM64', Download) {
    src libbulletjmeUrl + "Linux_ARM64${btfLinux_ARM64}_libbulletjme.so"
    dest file(nativeDir + 'linux/arm64/libbulletjme.so')
    overwrite false
}
tasks.register('downloadMacOSX32', Download) {
    src libbulletjmeUrl + "MacOSX32${btfMacOSX32}_libbulletjme.dylib"
    dest file(nativeDir + 'osx/x86/libbulletjme.dylib')
    overwrite false
}
tasks.register('downloadMacOSX64', Download) {
    src libbulletjmeUrl + "MacOSX64${btfMacOSX64}_libbulletjme.dylib"
    dest file(nativeDir + 'osx/x86_64/libbulletjme.dylib')
    overwrite false
}
tasks.register('downloadMacOSX_ARM64', Download) {
    src libbulletjmeUrl + "MacOSX_ARM64${btfMacOSX_ARM64}_libbulletjme.dylib"
    dest file(nativeDir + 'osx/arm64/libbulletjme.dylib')
    overwrite false
}
tasks.register('downloadWindows32', Download) {
    src libbulletjmeUrl + "Windows32${btfWindows32}_bulletjme.dll"
    dest file(nativeDir + 'windows/x86/bulletjme.dll')
    overwrite false
}
tasks.register('downloadWindows64', Download) {
    src libbulletjmeUrl + "Windows64${btfWindows64}_bulletjme.dll"
    dest file(nativeDir + 'windows/x86_64/bulletjme.dll')
    overwrite false
}

// Register cleanup tasks:

clean.dependsOn('cleanAndroid_ARM7', 'cleanAndroid_ARM8', 'cleanAndroid_X86',
    'cleanAndroid_X86_64', 'cleanLinux32', 'cleanLinux64',
    'cleanLinux_ARM32', 'cleanLinux_ARM64',
    'cleanMacOSX32', 'cleanMacOSX64', 'cleanMacOSX_ARM64',
    'cleanWindows32', 'cleanWindows64')

tasks.register('cleanAndroid_ARM7', Delete) {
    delete libDir + 'armeabi-v7a/libbulletjme.so'
}
tasks.register('cleanAndroid_ARM8', Delete) {
    delete libDir + 'arm64-v8a/libbulletjme.so'
}
tasks.register('cleanAndroid_X86', Delete) {
    delete libDir + 'x86/libbulletjme.so'
}
tasks.register('cleanAndroid_X86_64', Delete) {
    delete libDir + 'x86_64/libbulletjme.so'
}
tasks.register('cleanLinux32', Delete) {
    delete nativeDir + 'linux/x86/libbulletjme.so'
}
tasks.register('cleanLinux64', Delete) {
    delete nativeDir + 'linux/x86_64/libbulletjme.so'
}
tasks.register('cleanLinux_ARM32', Delete) {
    delete nativeDir + 'linux/arm32/libbulletjme.so'
}
tasks.register('cleanLinux_ARM64', Delete) {
    delete nativeDir + 'linux/arm64/libbulletjme.so'
}
tasks.register('cleanMacOSX32', Delete) {
    delete nativeDir + 'osx/x86/libbulletjme.dylib'
}
tasks.register('cleanMacOSX64', Delete) {
    delete nativeDir + 'osx/x86_64/libbulletjme.dylib'
}
tasks.register('cleanMacOSX_ARM64', Delete) {
    delete nativeDir + 'osx/arm64/libbulletjme.dylib'
}
tasks.register('cleanWindows32', Delete) {
    delete nativeDir + 'windows/x86/bulletjme.dll'
}
tasks.register('cleanWindows64', Delete) {
    delete nativeDir + 'windows/x86_64/bulletjme.dll'
}

// Register publishing tasks:

tasks.register('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description = 'Installs Maven artifacts to the local repository.'
}
tasks.register('release') {
    dependsOn 'publishMavenPublicationToOSSRHRepository'
    description = 'Stages Maven artifacts to Sonatype OSSRH.'
}

jar {
    archiveBaseName = project.ext.baseName
    doLast {
        println "using Java ${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
    exclude('**/empty')
    if (project.ext.jarType == 'nativesOnly') {
        exclude '**/*.class'  // no class files
        includeEmptyDirs false
    }
    manifest {
        attributes 'Created-By': "${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
}
tasks.register('javadocJar', Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description = 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}
tasks.register('sourcesJar', Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description = 'Creates a JAR of sourcecode.'
    from sourceSets.main.allJava // default is ".allSource", which includes resources
}

assemble.dependsOn('module', 'moduleAsc', 'pom', 'pomAsc')
tasks.register('module', Copy) {
    dependsOn 'generateMetadataFileForMavenPublication'
    description = 'Copies the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json"
    into "${buildDir}/libs"
    rename 'module.json', project.ext.baseName + '.module'
}
tasks.register('moduleAsc', Copy) {
    dependsOn 'signMavenPublication'
    description = 'Copies the signature of the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json.asc"
    into "${buildDir}/libs"
    rename 'module.json.asc', project.ext.baseName + '.module.asc'
}
tasks.register('pom', Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description = 'Copies the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
tasks.register('pomAsc', Copy) {
    dependsOn 'signMavenPublication'
    description = 'Copies the signature of the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into "${buildDir}/libs"
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact javadocJar
            artifact sourcesJar
            artifactId = artifact
            from components.java
            groupId = project.ext.group
            pom {
                description = 'a physics library for jMonkeyEngine'
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/Minie.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/Minie.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = 'https://stephengold.github.io/Minie'
            }
            version = project.ext.version + rootProject.ext.minieSnapshot
        }
    }
    // Staging to OSSRH relies on the existence of 2 properties
    // (ossrhUsername and ossrhPassword)
    // which should be stored in ~/.gradle/gradle.properties
    repositories {
        maven {
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}
generateMetadataFileForMavenPublication.dependsOn('pom')
publishMavenPublicationToMavenLocal.dependsOn('assemble')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + project.ext.baseName
}
publishMavenPublicationToOSSRHRepository.dependsOn('assemble')

// Register tasks to sign artifacts for publication:

//   Signing relies on the existence of 3 properties
//   (signing.keyId, signing.password, and signing.secretKeyRingFile)
//   which should be set in the ~/.gradle/gradle.properties file
//   or by -P options on the command line.

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { rootProject.hasProperty('signing.keyId') }
}
signMavenPublication.dependsOn('module')

// Register javadoc-to-(web)site tasks, triggered by push-master.yml:

tasks.register('copyJavadocToSite') {
    dependsOn 'copyMasterJavadocToSite', \
     'copy82JavadocToSite', \
     'copy81JavadocToSite', \
     'copy80JavadocToSite', \
     'copy78JavadocToSite', \
     'copy77JavadocToSite', \
     'copy76JavadocToSite', \
     'copy75JavadocToSite', \
     'copy74JavadocToSite', \
     'copy72JavadocToSite', \
     'copy71JavadocToSite', \
     'copy70JavadocToSite', \
     'copy62JavadocToSite', \
     'copy61JavadocToSite', \
     'copy60JavadocToSite', \
     'copy51JavadocToSite', \
     'copy50JavadocToSite', \
     'copy49JavadocToSite', \
     'copy48JavadocToSite', \
     'copy47JavadocToSite', \
     'copy46JavadocToSite', \
     'copy45JavadocToSite', \
     'copy44JavadocToSite', \
     'copy43JavadocToSite', \
     'copy42JavadocToSite', \
     'copy41JavadocToSite', \
     'copy40JavadocToSite', \
     'copy31JavadocToSite', \
     'copy30JavadocToSite', \
     'copy20JavadocToSite'
}
tasks.register('copyMasterJavadocToSite', Copy) {
    dependsOn 'javadoc'
    from "${buildDir}/docs/javadoc"
    into '../build/site/javadoc/master'
}
defineJavadocTasksForRelease('8', '2', '0')
defineJavadocTasksForRelease('8', '1', '0')
defineJavadocTasksForRelease('8', '0', '0')
defineJavadocTasksForRelease('7', '8', '1')
defineJavadocTasksForRelease('7', '7', '0')
defineJavadocTasksForRelease('7', '6', '0')
defineJavadocTasksForRelease('7', '5', '0')
defineJavadocTasksForRelease('7', '4', '0')
defineJavadocTasksForRelease('7', '2', '0')
defineJavadocTasksForRelease('7', '1', '0')
defineJavadocTasksForRelease('7', '0', '2')
defineJavadocTasksForRelease('6', '2', '0')
defineJavadocTasksForRelease('6', '1', '0')
defineJavadocTasksForRelease('6', '0', '1')
defineJavadocTasksForRelease('5', '1', '0')
defineJavadocTasksForRelease('5', '0', '1')
defineJavadocTasksForRelease('4', '9', '0')
defineJavadocTasksForRelease('4', '8', '1')
defineJavadocTasksForRelease('4', '7', '1')
defineJavadocTasksForRelease('4', '6', '1')
defineJavadocTasksForRelease('4', '5', '0')
defineJavadocTasksForRelease('4', '4', '0')
defineJavadocTasksForRelease('4', '3', '0')
defineJavadocTasksForRelease('4', '2', '0')
defineJavadocTasksForRelease('4', '1', '1')
defineJavadocTasksForRelease('4', '0', '2')
defineJavadocTasksForRelease('3', '1', '0')
defineJavadocTasksForRelease('3', '0', '0')
defineJavadocTasksForRelease('2', '0', '1')

// helper methods to configure native libraries:

void configureAndroidBtfs(String btfValue) {
    project.ext.btfAndroid_ARM7 = btfValue
    project.ext.btfAndroid_ARM8 = btfValue
    project.ext.btfAndroid_X86 = btfValue
    project.ext.btfAndroid_X86_64 = btfValue
}

void configureDesktopBtfs(String btfValue) {
    project.ext.btfLinux32 = btfValue
    if (btfValue.isEmpty()) {
        project.ext.btfLinux64 = ''
        project.ext.btfLinux_ARM32 = ''
        project.ext.btfWindows64 = ''
    } else {
        project.ext.btfLinux64 = btfValue
        project.ext.btfLinux_ARM32 = 'hf' + btfValue
        project.ext.btfWindows64 = btfValue
    }
    project.ext.btfLinux_ARM64 = btfValue
    project.ext.btfMacOSX32 = btfValue
    project.ext.btfMacOSX64 = btfValue
    project.ext.btfMacOSX_ARM64 = btfValue
    project.ext.btfWindows32 = btfValue
}

// helper method to register tasks that copy javadoc to the (web)site

void defineJavadocTasksForRelease(String major, String minor, String patch) {
    String downloadTaskName = "download${major}${minor}Javadoc"
    String downloadUrl = 'https://github.com/stephengold/Minie/releases/download'
    String jarPath = "${buildDir}/docs/v${major}-${minor}.jar"
    String mmp = "${major}.${minor}.${patch}"

    tasks.register(downloadTaskName, Download) {
        src "${downloadUrl}/${mmp}/Minie-${mmp}-javadoc.jar"
        dest file(jarPath)
    }

    tasks.register("copy${major}${minor}JavadocToSite", Copy) {
        dependsOn downloadTaskName
        from zipTree(jarPath)
        into "../build/site/javadoc/v${major}-${minor}"
    }
}
