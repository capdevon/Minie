// Gradle settings and tasks common to all Minie subprojects

apply plugin: 'checkstyle' // to analyze Java sourcecode for style violations
apply plugin: 'java'       // to compile and test Java projects

java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_8
}

checkstyle {
    toolVersion = libs.versions.checkstyle.get()
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
        // Suppress warnings that source value 7 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()
Boolean enableNativeAccess = JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    //args '--verbose' // to enable additional log output
    classpath sourceSets.main.runtimeClasspath
    enableAssertions = true
    if (enableNativeAccess) {
        jvmArgs '--enable-native-access=ALL-UNNAMED' // suppress System::load() warning
    }
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xcheck:jni'
    jvmArgs '-Xms1024m', '-Xmx1024m' // to enlarge the Java heap
    //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of snapshots
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', \
    'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
