// Gradle script to build the Minie/MinieAssets sub-project

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

ext {
    // output directories:
    assets = '../MinieExamples/src/main/resources/'
    glyphAssets = assets + 'CollisionShapes/glyphs/'
    poolBalls = assets + 'Textures/poolBalls/'

    // output directories for C-G models:
    baseMesh = assets + 'Models/BaseMesh'
    candyDish = assets + 'Models/CandyDish'
    duck = assets + 'Models/Duck'
    elephant = assets + 'Models/Elephant'
    jaime = assets + 'Models/Jaime'
    mhGame = assets + 'Models/MhGame'
    monkeyHead = assets + 'Models/MonkeyHead'
    ninja = assets + 'Models/Ninja'
    oto = assets + 'Models/Oto'
    sinbad = assets + 'Models/Sinbad'

    // generated collision-shape J3O files:
    ankhShape = assets + 'CollisionShapes/ankh.j3o'
    bananaShape = assets + 'CollisionShapes/banana.j3o'
    barrelShape = assets + 'CollisionShapes/barrel.j3o'
    bowlingPinShape = assets + 'CollisionShapes/bowlingPin.j3o'
    duckShape = assets + 'CollisionShapes/duck.j3o'
    heartShape = assets + 'CollisionShapes/heart.j3o'
    horseshoeShape = assets + 'CollisionShapes/horseshoe.j3o'
    swordShape = assets + 'CollisionShapes/sword.j3o'
    teapotShape = assets + 'CollisionShapes/teapot.j3o'
    teapotGiShape = assets + 'CollisionShapes/teapotGi.j3o'

    // generated texture files
    greenTile = assets + 'Textures/greenTile.png'
    plaid = assets + 'Textures/plaid.png'
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.deprecation = true
}

dependencies {
    implementation 'com.github.stephengold:jme-ttf:3.0.1'
    implementation heartCoordinates
    implementation 'org.jmonkeyengine:jme3-blender:3.3.2-stable'
    runtimeOnly    desktopCoordinates
    implementation pluginsCoordinates
    runtimeOnly    testdataCoordinates

    // MinieAssets doesn't use jme3-jogg
    //  -- it is included solely to avoid warnings from AssetConfig.
    runtimeOnly    joggCoordinates

    //implementation 'com.github.stephengold:Minie:' + minieVersion // for published library
    implementation project(':MinieLibrary') // for latest sourcecode
}

tasks.register('models', JavaExec) {
    description 'Generates C-G model assets used in MinieExamples.'
    mainClass = 'jme3utilities.minie.test.models.ImportCgms'
    outputs.files([
            baseMesh + '/BaseMesh.j3o',
            candyDish + '/CandyDish.j3o',
            duck + '/Duck.j3o',
            elephant + '/Elephant.j3o',
            jaime + '/Jaime-new.j3o',
            mhGame + '/MhGame.j3o',
            monkeyHead + '/MonkeyHead.j3o',
            ninja + '/Ninja.j3o',
            oto + '/Oto.j3o',
            sinbad + '/Sinbad.j3o',
            sinbad + '/Sword.j3o'
        ])
}

tasks.register('shapes') {
    dependsOn 'ankhShape', 'bananaShape', 'barrelShape', 'bowlingPinShape', \
        'duckShape', 'glyphShapes', 'heartShape', 'horseshoeShape', \
        'swordShape', 'teapotShape'
    description 'Generates collision-shape assets used in MinieExamples.'
}
tasks.register('ankhShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeAnkh'
    outputs.files([ankhShape])
}
tasks.register('bananaShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeBanana'
    outputs.files([bananaShape])
}
tasks.register('barrelShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeBarrel'
    outputs.files([barrelShape])
}
tasks.register('bowlingPinShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeBowlingPin'
    outputs.files([bowlingPinShape])
}
tasks.register('duckShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeDuck'
    outputs.files([duckShape])
}
tasks.register('glyphShapes', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeGlyphs'
    outputs.dirs([glyphAssets])
}
tasks.register('heartShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeHeart'
    outputs.files([heartShape])
}
tasks.register('horseshoeShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeHorseshoe'
    outputs.files([horseshoeShape])
}
tasks.register('swordShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeSword'
    outputs.files([swordShape])
}
tasks.register('teapotShape', JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeTeapot'
    outputs.files([teapotShape], [teapotGiShape])
}

tasks.register('textures') {
    dependsOn 'greenTile', 'plaid', 'poolBalls'
    description 'Generates texture assets used in MinieExamples.'
}
tasks.register('greenTile', JavaExec) {
    mainClass = 'jme3utilities.minie.test.textures.MakeGreenTile'
    outputs.files([greenTile])
}
tasks.register('plaid', JavaExec) {
    mainClass = 'jme3utilities.minie.test.textures.MakePlaid'
    outputs.files([plaid])
}
tasks.register('poolBalls', JavaExec) {
    mainClass = 'jme3utilities.minie.test.textures.MakePoolBalls'
    outputs.dirs([poolBalls])
}

// Register cleanup tasks:

clean.dependsOn('cleanModels', 'cleanShapes', 'cleanTextures')

tasks.register('cleanModels', Delete) {
    delete(baseMesh, candyDish, duck, elephant, jaime, mhGame, \
        monkeyHead, ninja, sinbad)
    dependsOn 'cleanOto'
    description 'Deletes generated model assets.'
}
tasks.register('cleanOto', Delete) {
    delete fileTree(dir: oto, include: 'Oto.*')
}

tasks.register('cleanShapes') {
    dependsOn 'cleanAnkhShape', 'cleanBananaShape', 'cleanBarrelShape', \
        'cleanBowlingPinShape', 'cleanDuckShape', 'cleanGlyphShapes', \
        'cleanHeartShape', 'cleanHorseshoeShape', 'cleanSwordShape', \
        'cleanTeapotShape'
    description 'Deletes generated collision-shape assets.'
}
tasks.register('cleanAnkhShape', Delete) {
    delete ankhShape
}
tasks.register('cleanBananaShape', Delete) {
    delete bananaShape
}
tasks.register('cleanBarrelShape', Delete) {
    delete barrelShape
}
tasks.register('cleanBowlingPinShape', Delete) {
    delete bowlingPinShape
}
tasks.register('cleanDuckShape', Delete) {
    delete duckShape
}
tasks.register('cleanGlyphShapes', Delete) {
    delete glyphAssets
}
tasks.register('cleanHeartShape', Delete) {
    delete heartShape
}
tasks.register('cleanHorseshoeShape', Delete) {
    delete horseshoeShape
}
tasks.register('cleanSwordShape', Delete) {
    delete swordShape
}
tasks.register('cleanTeapotShape', Delete) {
    delete teapotShape, teapotGiShape
}

tasks.register('cleanTextures', Delete) {
    delete(greenTile, plaid, poolBalls)
    description 'Deletes generated texture assets.'
}
